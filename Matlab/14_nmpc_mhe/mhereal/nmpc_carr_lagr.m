function [xdot] = nmpc_carr_lagr(x, u)

%This function contains the non-linear system equations. In order to change the control
%for open loop simulations or simulate without the pseudo-force s or implement mismodeling one has
%to change xdot or the constants accordingly.

%state vector
%x = [ddelta_arm; alpha; beta; dddelta_arm; dalpha; dbeta; ddelta_motor_sp; l_tether];
%delta_arm = x(1);
ddelta_arm = x(1);
alpha = x(2);
beta = x(3);
dddelta_arm = x(4);
dalpha = x(5);
dbeta = x(6);
l_tether = x(7);

%controls

ddelta_motor_sp = u(1);
dl_tether = u(2);

%constants
m_ball = 0.57;
%l_tether = 1.84;
I_arm = 205;
I_LAS=0.03203;
r_arm = 2.05;
g = 9.81;

wn=6.2409;
d=0.1288;
my_alpha_LA = 0.4876;%0.01
my_beta_LA = 2.1774;%1.2
mu_air=0.0074;
I_tether=1.0006;%0.8

xdot = [
dddelta_arm;
dalpha;
dbeta; 
wn*wn*ddelta_motor_sp-2*d*wn*dddelta_arm-wn*wn*ddelta_arm
%-(dalpha*my_alpha_LA + (I_tether*dbeta^2*sin(2*alpha))/2 + 2*dalpha*dl_tether*l_tether*m_ball + g*l_tether*m_ball*cos(alpha) + (dbeta^2*l_tether^2*m_ball*sin(2*alpha))/2 + (ddelta_arm^2*l_tether^2*m_ball*sin(2*alpha))/2 + dalpha*l_tether^2*mu_air*(dl_tether^2 + dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm*dl_tether*r_arm*cos(alpha)*sin(beta) + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2) + dbeta*ddelta_arm*l_tether^2*m_ball*sin(2*alpha) + ddelta_arm^2*l_tether*m_ball*r_arm*cos(beta)*sin(alpha) - dddelta_arm*l_tether*m_ball*r_arm*sin(alpha)*sin(beta) - ddelta_arm*l_tether*mu_air*r_arm*sin(alpha)*sin(beta)*(dl_tether^2 + dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm*dl_tether*r_arm*cos(alpha)*sin(beta) + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2))/(m_ball*l_tether^2 + I_tether);
%-(dbeta*my_beta_LA + dddelta_arm*l_tether^2*m_ball*cos(alpha)^2 - I_tether*dalpha*dbeta*sin(2*alpha) + 2*dbeta*dl_tether*l_tether*m_ball*cos(alpha)^2 + 2*ddelta_arm*dl_tether*l_tether*m_ball*cos(alpha)^2 - dalpha*dbeta*l_tether^2*m_ball*sin(2*alpha) - dalpha*ddelta_arm*l_tether^2*m_ball*sin(2*alpha) + dbeta*l_tether^2*mu_air*cos(alpha)^2*(dl_tether^2 + dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm*dl_tether*r_arm*cos(alpha)*sin(beta) + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2) + ddelta_arm*l_tether^2*mu_air*cos(alpha)^2*(dl_tether^2 + dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm*dl_tether*r_arm*cos(alpha)*sin(beta) + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2) + ddelta_arm^2*l_tether*m_ball*r_arm*cos(alpha)*sin(beta) + dddelta_arm*l_tether*m_ball*r_arm*cos(alpha)*cos(beta) + ddelta_arm*l_tether*mu_air*r_arm*cos(alpha)*cos(beta)*(dl_tether^2 + dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm*dl_tether*r_arm*cos(alpha)*sin(beta) + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2))/(m_ball*l_tether^2*cos(alpha)^2 + I_tether*cos(alpha)^2 + I_LAS);
%
%-(dalpha*my_alpha_LA + (I_tether*dbeta^2*sin(2*alpha))/2 + 2*dalpha*dl_tether*l_tether*m_ball + g*l_tether*m_ball*cos(alpha) + (dbeta^2*l_tether^2*m_ball*sin(2*alpha))/2 + (ddelta_arm^2*l_tether^2*m_ball*sin(2*alpha))/2 + dalpha*l_tether^2*mu_air*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2) + dbeta*ddelta_arm*l_tether^2*m_ball*sin(2*alpha) + ddelta_arm^2*l_tether*m_ball*r_arm*cos(beta)*sin(alpha) - ddelta_arm*dl_tether*m_ball*r_arm*sin(alpha)*sin(beta) - dddelta_arm*l_tether*m_ball*r_arm*sin(alpha)*sin(beta) - ddelta_arm*l_tether*mu_air*r_arm*sin(alpha)*sin(beta)*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2))/(m_ball*l_tether^2 + I_tether);
%-(dbeta*my_beta_LA + dddelta_arm*l_tether^2*m_ball*cos(alpha)^2 - I_tether*dalpha*dbeta*sin(2*alpha) + 2*dbeta*dl_tether*l_tether*m_ball*cos(alpha)^2 + 2*ddelta_arm*dl_tether*l_tether*m_ball*cos(alpha)^2 - dalpha*dbeta*l_tether^2*m_ball*sin(2*alpha) - dalpha*ddelta_arm*l_tether^2*m_ball*sin(2*alpha) + dbeta*l_tether^2*mu_air*cos(alpha)^2*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2) + ddelta_arm*l_tether^2*mu_air*cos(alpha)^2*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2) + ddelta_arm^2*l_tether*m_ball*r_arm*cos(alpha)*sin(beta) + ddelta_arm*dl_tether*m_ball*r_arm*cos(alpha)*cos(beta) + dddelta_arm*l_tether*m_ball*r_arm*cos(alpha)*cos(beta) + ddelta_arm*l_tether*mu_air*r_arm*cos(alpha)*cos(beta)*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2))/(m_ball*l_tether^2*cos(alpha)^2 + I_tether*cos(alpha)^2 + I_LAS);
%
-(dalpha*my_alpha_LA + (I_tether*dbeta^2*sin(2*alpha))/2 + g*l_tether*m_ball*cos(alpha) + (dbeta^2*l_tether^2*m_ball*sin(2*alpha))/2 + (ddelta_arm^2*l_tether^2*m_ball*sin(2*alpha))/2 + dalpha*l_tether^2*mu_air*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2) + dbeta*ddelta_arm*l_tether^2*m_ball*sin(2*alpha) + ddelta_arm^2*l_tether*m_ball*r_arm*cos(beta)*sin(alpha) - dddelta_arm*l_tether*m_ball*r_arm*sin(alpha)*sin(beta) - ddelta_arm*l_tether*mu_air*r_arm*sin(alpha)*sin(beta)*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2))/(m_ball*l_tether^2 + I_tether);
-(dbeta*my_beta_LA + dddelta_arm*l_tether^2*m_ball*cos(alpha)^2 - I_tether*dalpha*dbeta*sin(2*alpha) - dalpha*dbeta*l_tether^2*m_ball*sin(2*alpha) - dalpha*ddelta_arm*l_tether^2*m_ball*sin(2*alpha) + dbeta*l_tether^2*mu_air*cos(alpha)^2*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2) + ddelta_arm*l_tether^2*mu_air*cos(alpha)^2*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2) + ddelta_arm^2*l_tether*m_ball*r_arm*cos(alpha)*sin(beta) + dddelta_arm*l_tether*m_ball*r_arm*cos(alpha)*cos(beta) + ddelta_arm*l_tether*mu_air*r_arm*cos(alpha)*cos(beta)*(dalpha^2*l_tether^2 + ddelta_arm^2*r_arm^2 + dbeta^2*l_tether^2*cos(alpha)^2 + ddelta_arm^2*l_tether^2*cos(alpha)^2 + 2*dbeta*ddelta_arm*l_tether^2*cos(alpha)^2 + 2*ddelta_arm^2*l_tether*r_arm*cos(alpha)*cos(beta) + 2*dbeta*ddelta_arm*l_tether*r_arm*cos(alpha)*cos(beta) - 2*dalpha*ddelta_arm*l_tether*r_arm*sin(alpha)*sin(beta))^(1/2))/(m_ball*l_tether^2*cos(alpha)^2 + I_tether*cos(alpha)^2 + I_LAS);
%dddelta_motor_sp;
-dl_tether
];

end